/**
 * バージョンで出し分け
 */
const wpBlockEditor = undefined === wp.blockEditor ? wp.editor : wp.blockEditor;

/**
 * export
 */
export const { blocks, editor, element, components } = wp,
	{ __, _x } = wp.i18n,
	// { getRectangleFromRange } = wp.dom,
	{ useEntityProp } = wp.coreData,
	{ withSelect, useSelect, useDispatch } = wp.data,
	{ addFilter, addAction, doAction, applyFilters } = wp.hooks,
	{ registerBlockType, createBlock } = blocks,
	{ withState, createHigherOrderComponent } = wp.compose,
	{ getEntityRecords } = wp.data.select('core'),
	{ registerFormatType, toggleFormat, getActiveFormat, applyFormat, removeFormat } = wp.richText,
	{
		Fragment,
		Component,
		createContext,
		useState,
		useMemo,
		useCallback,
		// createElement: el,
		RawHTML,
	} = element,
	{
		RichText,
		InnerBlocks,
		URLInput,
		URLPopover,
		InspectorControls,
		AlignmentToolbar,
		BlockAlignmentToolbar,
		BlockVerticalAlignmentToolbar,
		BlockControls,
		BlockFormatControls,
		RichTextShortcut,
		RichTextToolbarButton,
		PanelColorSettings,
		MediaUpload,
		MediaUploadCheck,
		MediaPlaceholder,
		PlainText,
		getColorClassName,
		getColorObjectByColorValue,
		getColorObjectByAttributeValues,
	} = wpBlockEditor,
	{
		Slot,
		Fill,
		Icon,
		SVG,
		Path,
		PanelRow,
		PanelHeader,
		TabPanel,
		PanelBody,
		BaseControl,
		Tooltip,
		// Toolbar,
		ToolbarButton,
		DropdownMenu,
		Button,
		ButtonGroup,
		CheckboxControl,
		RadioControl,
		SelectControl,
		TreeSelect,
		TextControl,
		TextareaControl,
		FormToggle,
		ToggleControl,
		ColorPicker,
		ColorPalette,
		RangeControl,
		Popover,
		// IconButton,
		FocalPointPicker,
		FontSizePicker,
	} = components;
